using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace CustomerManagementSystem.EventStoreSrouceGenerator.Tests;

public class AggregatePartialMethodGeneratorTests
{
    [Fact]
    public void GeneratePartialMethod_For_Apply_Method_When_NamespaceIsFileScoped()
    {
        //lang=csharp
        const string sourceTextWithFileScopedNamespace = """
                                                         namespace CustomerManagementSystem.Api.Customers;

                                                         public sealed partial class Customer : IAmAggregateRoot
                                                         {
                                                             public Guid CustomerId { get; private set; }
                                                             
                                                             public void Apply(IEvent @event)
                                                             {
                                                                 ((dynamic)this).Apply((dynamic)@event);
                                                             }
                                                         }

                                                         public partial interface IEvent<TA> where TA : IAmAggregateRoot, new();

                                                         internal record EmailUpdated(Guid CustomerId, string Email) : IEvent<Customer>
                                                         {
                                                         }
                                                         """;
        //lang=csharp
        const string expectedGeneratedClassText = """
                                                  // <auto-generated/>

                                                  namespace CustomerManagementSystem.Api.Customers;

                                                  public sealed partial class Customer
                                                  {
                                                      private partial void Apply(EmailUpdated @event);
                                                  }
                                                  
                                                  """;

        // Create an instance of the source generator.
        var generator = new AggregatePartialMethodGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(JsonAttributesEventGenerator),
            [CSharpSyntaxTree.ParseText(sourceTextWithFileScopedNamespace)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            ]);

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("CustomerAggregate.PartialMethods.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(expectedGeneratedClassText, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
    [Fact]
    public void GeneratePartialMethod_For_Apply_Method_MultipleEvents()
    {
        //lang=csharp
        const string sourceTextWithFileScopedNamespace = """
                                                         namespace CustomerManagementSystem.Api.Customers;

                                                         public sealed partial class Customer : IAmAggregateRoot
                                                         {
                                                             public Guid CustomerId { get; private set; }
                                                             
                                                             public void Apply(Event @event)
                                                             {
                                                                 ((dynamic)this).Apply((dynamic)@event);
                                                             }
                                                         }

                                                         public partial interface IEvent<TA> where TA : IAmAggregateRoot, new();

                                                         internal record EmailUpdated(Guid CustomerId, string Email) : IEvent<Customer>
                                                         {
                                                         }
                                                         
                                                         internal record CustomerUpdated(Guid CustomerId, string Name) : IEvent<Customer>
                                                         {
                                                         }
                                                         
                                                         """;
        //lang=csharp
        const string expectedGeneratedClassText = """
                                                  // <auto-generated/>

                                                  namespace CustomerManagementSystem.Api.Customers;

                                                  public sealed partial class Customer
                                                  {
                                                      private partial void Apply(CustomerUpdated @event);
                                                      private partial void Apply(EmailUpdated @event);
                                                  }
                                                  
                                                  """;

        // Create an instance of the source generator.
        var generator = new AggregatePartialMethodGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(JsonAttributesEventGenerator),
            [CSharpSyntaxTree.ParseText(sourceTextWithFileScopedNamespace)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            ]);

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("CustomerAggregate.PartialMethods.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(expectedGeneratedClassText, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
    [Fact]
    public void GeneratePartialMethod_For_Apply_Method_WithMultipleAggregates_MultipleEvents()
    {
        //lang=csharp
        const string sourceTextWithFileScopedNamespace = """
                                                         namespace CustomerManagementSystem.Api.Customers;

                                                         public sealed partial class Customer : IAmAggregateRoot
                                                         {
                                                             public Guid CustomerId { get; private set; }
                                                             
                                                             public void Apply(Event @event)
                                                             {
                                                                 ((dynamic)this).Apply((dynamic)@event);
                                                             }
                                                         }
                                                         
                                                         public sealed partial class Basket : IAmAggregateRoot
                                                         {
                                                             public Guid BasketId { get; private set; }
                                                             
                                                             public void Apply(Event @event)
                                                             {
                                                                 ((dynamic)this).Apply((dynamic)@event);
                                                             }
                                                         }

                                                         public partial interface IEvent<TA> where TA : IAmAggregateRoot, new();

                                                         internal record EmailUpdated(Guid CustomerId, string Email) : IEvent<Customer>
                                                         {
                                                             public override Guid StreamId => CustomerId;
                                                         }
                                                         
                                                         internal record ItemAdded(Guid BasketId, string ProductName) : IEvent<Basket>
                                                         {
                                                             public override Guid StreamId => BasketId;
                                                         }
                                                         
                                                         """;
        //lang=csharp
        const string expectedTextForCustomerAggregate = """
                                                  // <auto-generated/>

                                                  namespace CustomerManagementSystem.Api.Customers;

                                                  public sealed partial class Customer
                                                  {
                                                      private partial void Apply(EmailUpdated @event);
                                                  }
                                                  
                                                  """;

        //lang=csharp
        const string expectedTextForBasketAggregate = """
                                                        // <auto-generated/>

                                                        namespace CustomerManagementSystem.Api.Customers;

                                                        public sealed partial class Basket
                                                        {
                                                            private partial void Apply(ItemAdded @event);
                                                        }

                                                        """;

        
        // Create an instance of the source generator.
        var generator = new AggregatePartialMethodGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(JsonAttributesEventGenerator),
            [CSharpSyntaxTree.ParseText(sourceTextWithFileScopedNamespace)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            ]);

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileForCustomerAggregate = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("CustomerAggregate.PartialMethods.g.cs"));
        var generatedFileForBasketAggregate = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("BasketAggregate.PartialMethods.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(expectedTextForCustomerAggregate, generatedFileForCustomerAggregate.GetText().ToString(),
            ignoreLineEndingDifferences: true);
        Assert.Equal(expectedTextForBasketAggregate, generatedFileForBasketAggregate.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
}
