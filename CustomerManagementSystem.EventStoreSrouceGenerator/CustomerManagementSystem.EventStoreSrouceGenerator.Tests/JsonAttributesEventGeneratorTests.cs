using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace CustomerManagementSystem.EventStoreSrouceGenerator.Tests;

public class JsonAttributesEventGeneratorTests
{
    //lang=csharp
    private const string SourceTextWithFileScopedNamespace = """
                                                             namespace CustomerManagementSystem.Domain;
                                                             
                                                             public partial interface IEvent;
                                                             public interface IEvent<TA> : IEvent where TA : IAmAggregateRoot, new();
                                                             
                                                             public class Customer{}
                                                             
                                                             public sealed record CustomerRegistered (Guid CustomerId, string FullName, string Email, DateTime DateOfBirth) 
                                                                 : IEvent<Customer>;
                                                             """;

    //lang=csharp
    private const string ExpectedGeneratedClassText = """
                                                      // <auto-generated/>

                                                      using System.Text.Json.Serialization;

                                                      namespace CustomerManagementSystem.Domain;

                                                      [JsonPolymorphic(IgnoreUnrecognizedTypeDiscriminators = true)]
                                                      [JsonDerivedType(typeof(CustomerRegistered), nameof(CustomerRegistered))]
                                                      public partial interface IEvent;

                                                      """;

    [Fact]
    public void GeneratePartialEventWithAttributes_When_NamespaceIsFileScoped()
    {
        // Create an instance of the source generator.
        var generator = new JsonAttributesEventGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(JsonAttributesEventGenerator),
            [CSharpSyntaxTree.ParseText(SourceTextWithFileScopedNamespace)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            ]);

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("EventsJsonAttributes.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(ExpectedGeneratedClassText, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }

    //lang=csharp
    private const string SourceTextWithNormalNamespace = """
                                                         namespace CustomerManagementSystem.Domain;
                                                         {
                                                             public partial interface IEvent;
                                                             public interface IEvent<TA> : IEvent where TA : IAmAggregateRoot, new();
                                                         
                                                             public class Customer{}
                                                            
                                                             public sealed record CustomerRegistered (Guid CustomerId, string FullName, string Email, DateTime DateOfBirth) 
                                                                 : IEvent<Customer>;
                                                         }
                                                         """;

    [Fact]
    public void GeneratePartialEventWithAttributes_When_NamespaceNormal()
    {
        // Create an instance of the source generator.
        var generator = new JsonAttributesEventGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(JsonAttributesEventGenerator),
            [CSharpSyntaxTree.ParseText(SourceTextWithNormalNamespace)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            ]);

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("EventsJsonAttributes.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(ExpectedGeneratedClassText, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }

    //lang=csharp
    private const string SourceTextWithDifferentNamespace = """
                                                            namespace CustomerManagementSystem.Domain;
                                                            {
                                                                public partial interface IEvent;
                                                                public interface IEvent<TA> : IEvent where TA : IAmAggregateRoot, new();
                                                                
                                                                public class Customer{}
                                                            }

                                                            namespace EventsNamespaces
                                                            {
                                                                using CustomerManagementSystem.Domain;
                                                                
                                                                public sealed record CustomerRegistered (Guid CustomerId, string FullName, string Email, DateTime DateOfBirth) 
                                                                    : IEvent<Customer>;
                                                            }
                                                            """;

    //lang=csharp
    private const string ExpectedWhenHavingDifferentNamespaces = """
                                                                 // <auto-generated/>

                                                                 using System.Text.Json.Serialization;
                                                                 using EventsNamespaces;

                                                                 namespace CustomerManagementSystem.Domain;

                                                                 [JsonPolymorphic(IgnoreUnrecognizedTypeDiscriminators = true)]
                                                                 [JsonDerivedType(typeof(CustomerRegistered), nameof(CustomerRegistered))]
                                                                 public partial interface IEvent;

                                                                 """;

    //lang=csharp
    private const string SourceTextWithSubNamespace = """
                                                            namespace CustomerManagementSystem.Domain;
                                                            {
                                                                public partial interface IEvent;
                                                                public interface IEvent<TA> : IEvent where TA : IAmAggregateRoot, new();
                                                                
                                                                public class Customer{}
                                                            }

                                                            namespace CustomerManagementSystem.Domain.EventsNamespaces
                                                            {
                                                                using CustomerManagementSystem.Domain;
                                                                
                                                                public sealed record CustomerRegistered (Guid CustomerId, string FullName, string Email, DateTime DateOfBirth) 
                                                                    : IEvent<Customer>;
                                                            }
                                                            """;
    //lang=csharp
    private const string ExpectedWhenHavingSubtNamespaces = """
                                                                 // <auto-generated/>

                                                                 using System.Text.Json.Serialization;
                                                                 using CustomerManagementSystem.Domain.EventsNamespaces;

                                                                 namespace CustomerManagementSystem.Domain;

                                                                 [JsonPolymorphic(IgnoreUnrecognizedTypeDiscriminators = true)]
                                                                 [JsonDerivedType(typeof(CustomerRegistered), nameof(CustomerRegistered))]
                                                                 public partial interface IEvent;

                                                                 """;


    [Fact]
    public void GeneratePartialEventWithAttributes_When_DifferentNamespaces()
    {
        // Create an instance of the source generator.
        var generator = new JsonAttributesEventGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(JsonAttributesEventGenerator),
            [CSharpSyntaxTree.ParseText(SourceTextWithDifferentNamespace)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            ]);

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("EventsJsonAttributes.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(ExpectedWhenHavingDifferentNamespaces, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }

    [Fact]
    public void GeneratePartialEventWithAttributes_When_SubNamespaces()
    {
        // Create an instance of the source generator.
        var generator = new JsonAttributesEventGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(JsonAttributesEventGenerator),
            [CSharpSyntaxTree.ParseText(SourceTextWithSubNamespace)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            ]);

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("EventsJsonAttributes.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(ExpectedWhenHavingSubtNamespaces, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }

}
